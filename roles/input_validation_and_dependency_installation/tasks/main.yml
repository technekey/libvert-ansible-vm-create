---
# tasks file for input_validation_and_dependency_installation
  
  - name: "Display warnings"
    debug:
      msg:  "{{ 'Consider checking the host_vars/localhost/defaults.yml file to customize the VM size and login options'|warn_user }}"

  - name: "Validate the minimum required hostvars configuration"
    fail:
      msg: "Required variable {{item }} is not defined "
    when: vars[item] is undefined
    loop: "{{ required_vars }}"

  - name: "Create the required directory"
    file:
      state: directory
      path: "{{ item }}"
      mode: '0755'
    loop: "{{ required_directories }}"

  - name: "Install the dependencies on the host"
    package:
      name: "{{ item }}"
      state: present
    loop:
    - python3-libvirt
    - libvirt-clients
    - virtinst
    - guestfs-tools
    - qemu-utils
    - qemu-kvm
    - cloud-image-utils

  - name: "Sets default ACL for libvirt-qemu for {{ vm_disk_location }}"
    ansible.posix.acl:
      path: "{{ vm_disk_location}}"
      entity: libvirt-qemu
      etype: user
      permissions: rx
      default: true
      state: present
    when: download_location != "/var/lib/libvirt/images"

  - name: "Loading the path of all required binaries in the ansible host"
    ansible.builtin.shell: "which {{ item }} || :"
    register: bin_path
    loop: "{{ required_binaries }}"
    failed_when: bin_path.stdout_lines |length == 0

  - name: "List the Existing KVM present on the host machine"
    community.libvirt.virt:
      command: list_vms
    register: all_vms

  - name: "Check if the user requested VM is already present in the Host"
    set_fact:
      vm_running: "{% if vm_name in all_vms.list_vms %}True{%else%}False{%endif%}"

  - name: "Display the presence of the vm({{vm_name}})in the Host"
    debug:
      msg: >
          "{% if vm_name in all_vms.list_vms %}
             {{vm_name}} is already present in the host. Skipping with VM creation.
           {%else%}
             {{vm_name}} is not present in the host. Continuing the VM creation.
           {%endif%}"

  - meta: end_play
    when: vm_running|bool and playbook_action|regex_search('^create$')

  - name: "Determine the valid list of OS-Variants"
    ansible.builtin.shell: virt-install --osinfo list |grep -q "{{ os_variant }}"
    ignore_errors: true
    register: variant_list

  - name: assert the os-variant
    assert:
      that: variant_list.rc == 0
      fail_msg: "Invalid OS-Variant provided, run 'virt-install --osinfo list' to get the list of variants"
      success_msg: "OS Variant assertion passed"

