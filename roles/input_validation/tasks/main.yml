---
# tasks file for input_validation
  - name: "Ensure the dependencies are present on the host"
    package:
      name:
        - guestfs-tools
        - python3-libvirt
      state: present

  - name: "Check for cloud_init_file input variable"
    debug:
      msg: "[WARNING] cloud_init_file is not provided as extra args, playbook will use default cloud-init file, the behaviour might be different then expectations"
    when: cloud_init_file is not defined

  - name: "Ensure required parameters are supplied via extra-vars"
    assert:
      that: ( (vm_name is defined) and
              (vcpus is defined ) and
              (memory_mb is defined) and
              (os_variant is defined) and
              (disk_size is defined) and
              (image_source is defined) )
      fail_msg: |
        "One or more required args are not defined"
        "vm_name={{vm_name|default('UNDEFINED')}}"
        "vcpus={{vcpus|default('UNDEFINED')}}"
        "os_variant={{os_variant|default('UNDEFINED')}}"
        "disk_size={{disk_size|default('UNDEFINED')}}"
        "image_source={{image_source|default('UNDEFINED')}}"
      success_msg: "All required extra args are defined"

  - name: "List the Existing KVM present on the host machine"
    community.libvirt.virt:
      command: list_vms
    register: all_vms

  - name: "Check if the user requested VM is already present in the Host"
    assert:
      that:  vm_name not in all_vms.list_vms
      fail_msg: The requested VM({{ vm_name }}) is already present in the system

  - name: "Loading the path of all required binaries in the ansible host"
    ansible.builtin.shell: "which {{ item }} || :"
    register: bin_path
    loop: "{{ required_binaries }}"
    failed_when: bin_path.stdout_lines |length == 0

  - name: "Validating the network mode"
    assert:
      that: network_to_use |regex_search('^default$|^bridged$')
      fail_msg: "Unsupported network mode. Playbook only supports default or bridged mode"
      success_msg: "Network mode validated."

  - name: "Collect the stats of provided cloud init file"
    stat:
      path: "{{ cloud_init_file }}"
    register: cloud_init_stats
    when: cloud_init_file is defined

  - name: "Ensure the provided cloud-init file exist"
    assert:
      that: cloud_init_stats.stat.exists
      fail_msg: "The provided cloud init file({{ cloud_init_file }}) does not exist"
      success_msg: "The provided cloud init file exists({{ cloud_init_file }})"
    when: cloud_init_file is defined
